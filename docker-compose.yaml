version: "3.8"

services:
  redis:
    image: redis:latest
    ports:
      - '6379:6379'

  meilisearch:
    build:
      context: .
      dockerfile_inline: |
        FROM getmeili/meilisearch:v1.6.2
        COPY meili_dumps/meilisearch-dump.dump /tmp/meilisearch-dump.dump
    container_name: meilisearch
    environment:
      - MEILI_ENV=production
      - MEILI_MASTER_KEY=${MEILI_MASTER_KEY}
    ports:
      - "7700:7700"
    entrypoint: >
      sh -c "
        echo 'DEBUG: Checking if dump file exists in container:';
        ls -la /tmp/meilisearch-dump.dump 2>/dev/null || echo 'Dump file not found in /tmp/';
        if [ ! -f /meili_data/.restore_done ]; then
          echo 'Checking existing data...';
          if [ -d /meili_data/data.ms ]; then
            echo 'Existing database directory found, deleting...';
            rm -rf /meili_data/data.ms;
          fi;
          echo 'Restoring from dump...';
          meilisearch --import-dump /tmp/meilisearch-dump.dump &&
          touch /meili_data/.restore_done;
        fi;
        meilisearch
      "
    volumes:
      - meili_data_vol:/meili_data
    depends_on:
      - redis

  # backend:
  #   build: ./backend
  #   ports:
  #     - '3001:3001'
  #   environment:
  #     - NODE_ENV=production
  #     - PORT=3001
  #     - MEILI_MASTER_KEY=${MEILI_MASTER_KEY}
  #     - MEILI_PAGINATION_MAX_TOTAL_HITS=20000
  #     - REDIS_HOST=redis
  #     - MEILISEARCH_HOST=${MEILISEARCH_HOST}
  #     - BACKEND_HOST=${BACKEND_HOST}
  #     - FRONTEND_URL=${FRONTEND_URL}
  #     - PFX_CERT_PATH=${PFX_CERT_PATH}
  #     - PFX_CERT_PASSWORD=${PFX_CERT_PASSWORD}
  #     - API_ENDPOINT=${API_ENDPOINT}
  #     - AZURE_TENANT_ID=${AZURE_TENANT_ID}
  #     - AZURE_CLIENT_ID=${AZURE_CLIENT_ID}
  #     - API_SCOPE=${API_SCOPE}
  #   depends_on:
  #     - redis
  #     - meilisearch
  backend:
    build: ./backend
    ports:
      - '3001:3001'
    environment:
      - NODE_ENV=production
      - PORT=3001
      - MEILI_MASTER_KEY=${MEILI_MASTER_KEY}
      - MEILI_PAGINATION_MAX_TOTAL_HITS=20000
      - REDIS_HOST=redis
      - MEILISEARCH_HOST=${MEILISEARCH_HOST}
      - BACKEND_HOST=${BACKEND_HOST}
      - FRONTEND_URL=${FRONTEND_URL}
      - PFX_CERT_PATH=${PFX_CERT_PATH}
      - PFX_CERT_PASSWORD=${PFX_CERT_PASSWORD}
      - API_ENDPOINT=${API_ENDPOINT}
      - AZURE_TENANT_ID=${AZURE_TENANT_ID}
      - AZURE_CLIENT_ID=${AZURE_CLIENT_ID}
      - API_SCOPE=${API_SCOPE}
    depends_on:
      - redis
      - meilisearch
    container_name: backend-jgw40g44w08sggss4ckck04g-120830632687
    restart: unless-stopped
    networks:
      - coolify  # ← CRITICAL: This was missing!
    labels:
      - traefik.enable=true
      - traefik.http.routers.api.rule=Host(`api.dhonchak.dev`)
      - traefik.http.routers.api.entrypoints=websecure
      - traefik.http.routers.api.tls=true
      - traefik.http.routers.api.tls.certresolver=letsencrypt  # ← CRITICAL: This was missing!
      - traefik.http.services.api.loadbalancer.server.port=3001
      # CORS middleware
      - traefik.http.middlewares.cors.headers.accesscontrolalloworigin=https://paywiselease.netlify.app
      - traefik.http.middlewares.cors.headers.accesscontrolallowmethods=GET,OPTIONS,PUT,POST,DELETE
      - traefik.http.middlewares.cors.headers.accesscontrolallowheaders=*
      - traefik.http.routers.api.middlewares=cors@docker


  frontend:
    build: ./frontend
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=production
      - BACKEND_URL=${BACKEND_HOST}
    stdin_open: true
    tty: true
    depends_on:
      - backend

volumes:
  meili_data_vol:

networks:
    coolify:
      external: true
